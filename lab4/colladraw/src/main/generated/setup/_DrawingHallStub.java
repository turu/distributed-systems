package setup;


/**
* setup/_DrawingHallStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from api.idl
* Tuesday, May 6, 2014 12:57:50 AM CEST
*/

public class _DrawingHallStub extends org.omg.CORBA.portable.ObjectImpl implements setup.DrawingHall
{

  public model.DrawingRoomToken[] getActiveRooms (model.PainterToken painterToken) throws setup.exceptions.NoSuchPainterRegisteredException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getActiveRooms", true);
                model.PainterTokenHelper.write ($out, painterToken);
                $in = _invoke ($out);
                model.DrawingRoomToken $result[] = setup.DrawingRoomTokenSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:setup/exceptions/NoSuchPainterRegisteredException:1.0"))
                    throw setup.exceptions.NoSuchPainterRegisteredExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getActiveRooms (painterToken        );
            } finally {
                _releaseReply ($in);
            }
  } // getActiveRooms

  public model.DrawingRoom getDrawingRoom (model.DrawingRoomToken roomToken) throws setup.exceptions.AccessDeniedException, setup.exceptions.NoSuchDrawingRoomException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getDrawingRoom", true);
                model.DrawingRoomTokenHelper.write ($out, roomToken);
                $in = _invoke ($out);
                model.DrawingRoom $result = model.DrawingRoomHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:setup/exceptions/AccessDeniedException:1.0"))
                    throw setup.exceptions.AccessDeniedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:setup/exceptions/NoSuchDrawingRoomException:1.0"))
                    throw setup.exceptions.NoSuchDrawingRoomExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getDrawingRoom (roomToken        );
            } finally {
                _releaseReply ($in);
            }
  } // getDrawingRoom

  public void createRoom (String name, model.PainterToken painterToken) throws setup.exceptions.AccessDeniedException, setup.exceptions.DrawingRoomAlreadyExistsException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("createRoom", true);
                $out.write_string (name);
                model.PainterTokenHelper.write ($out, painterToken);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:setup/exceptions/AccessDeniedException:1.0"))
                    throw setup.exceptions.AccessDeniedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:setup/exceptions/DrawingRoomAlreadyExistsException:1.0"))
                    throw setup.exceptions.DrawingRoomAlreadyExistsExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                createRoom (name, painterToken        );
            } finally {
                _releaseReply ($in);
            }
  } // createRoom

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:setup/DrawingHall:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _DrawingHallStub
